import json
from web3 import Web3

ganache_url = "HTTP://127.0.0.1:8545"
web3 = Web3(Web3.HTTPProvider(ganache_url))

abi = json.loads('[ { "constant": false, "inputs": [ { "internalType": "string", "name": "_tipAdd", "type": "string" }, { "internalType": "string", "name": "_category", "type": "string" }, { "internalType": "string", "name": "_brief", "type": "string" }, { "internalType": "string", "name": "_time", "type": "string" }, { "internalType": "string", "name": "_location", "type": "string" }, { "internalType": "string", "name": "_station", "type": "string" }, { "internalType": "int256", "name": "_tipscore", "type": "int256" } ], "name": "addTips", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "internalType": "string", "name": "_id", "type": "string" } ], "name": "getTipsInfo", "outputs": [ { "internalType": "string", "name": "", "type": "string" }, { "internalType": "string", "name": "", "type": "string" }, { "internalType": "string", "name": "", "type": "string" }, { "internalType": "string", "name": "", "type": "string" }, { "internalType": "string", "name": "", "type": "string" }, { "internalType": "int256", "name": "", "type": "int256" } ], "payable": false, "stateMutability": "view", "type": "function" } ]')
bytecode = "608060405234801561001057600080fd5b50610e9f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806344a36a9b1461003b578063cff22f0e14610326575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506106de565b60405180806020018060200180602001806020018060200187815260200186810386528c818151815260200191508051906020019080838360005b8381101561014a57808201518184015260208101905061012f565b50505050905090810190601f1680156101775780820380516001836020036101000a031916815260200191505b5086810385528b818151815260200191508051906020019080838360005b838110156101b0578082015181840152602081019050610195565b50505050905090810190601f1680156101dd5780820380516001836020036101000a031916815260200191505b5086810384528a818151815260200191508051906020019080838360005b838110156102165780820151818401526020810190506101fb565b50505050905090810190601f1680156102435780820380516001836020036101000a031916815260200191505b50868103835289818151815260200191508051906020019080838360005b8381101561027c578082015181840152602081019050610261565b50505050905090810190601f1680156102a95780820380516001836020036101000a031916815260200191505b50868103825288818151815260200191508051906020019080838360005b838110156102e25780820151818401526020810190506102c7565b50505050905090810190601f16801561030f5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b6106dc600480360360e081101561033c57600080fd5b810190808035906020019064010000000081111561035957600080fd5b82018360208201111561036b57600080fd5b8035906020019184600183028401116401000000008311171561038d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103f057600080fd5b82018360208201111561040257600080fd5b8035906020019184600183028401116401000000008311171561042457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460018302840111640100000000831117156104bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561051e57600080fd5b82018360208201111561053057600080fd5b8035906020019184600183028401116401000000008311171561055257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105b557600080fd5b8201836020820111156105c757600080fd5b803590602001918460018302840111640100000000831117156105e957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561064c57600080fd5b82018360208201111561065e57600080fd5b8035906020019184600183028401116401000000008311171561068057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610c58565b005b6060806060806060600080600090505b600080549050811015610bea57876040516020018082805190602001908083835b60208310610732578051825260208201915060208101905060208303925061070f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001206000828154811061077a57fe5b906000526020600020906007020160000160405160200180828054600181600116156101000203166002900480156107e95780601f106107c75761010080835404028352918201916107e9565b820191906000526020600020905b8154815290600101906020018083116107d5575b5050915050604051602081830303815290604052805190602001201415610bdd576000818154811061081757fe5b90600052602060002090600702016001016000828154811061083557fe5b90600052602060002090600702016002016000838154811061085357fe5b90600052602060002090600702016003016000848154811061087157fe5b90600052602060002090600702016004016000858154811061088f57fe5b9060005260206000209060070201600501600086815481106108ad57fe5b906000526020600020906007020160060154858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109545780601f1061092957610100808354040283529160200191610954565b820191906000526020600020905b81548152906001019060200180831161093757829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109f05780601f106109c5576101008083540402835291602001916109f0565b820191906000526020600020905b8154815290600101906020018083116109d357829003601f168201915b50505050509450838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a8c5780601f10610a6157610100808354040283529160200191610a8c565b820191906000526020600020905b815481529060010190602001808311610a6f57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc45780601f10610b9957610100808354040283529160200191610bc4565b820191906000526020600020905b815481529060010190602001808311610ba757829003601f168201915b5050505050915096509650965096509650965050610c4f565b80806001019150506106ee565b506000604051806020016040528060008152509060405180602001604052806000815250906040518060200160405280600081525090604051806020016040528060008152509060405180602001604052806000815250909550955095509550955095505b91939550919395565b610c60610d88565b6040518060e00160405280898152602001888152602001878152602001868152602001858152602001848152602001838152509050600081908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000019080519060200190610cdf929190610dc5565b506020820151816001019080519060200190610cfc929190610dc5565b506040820151816002019080519060200190610d19929190610dc5565b506060820151816003019080519060200190610d36929190610dc5565b506080820151816004019080519060200190610d53929190610dc5565b5060a0820151816005019080519060200190610d70929190610dc5565b5060c082015181600601555050505050505050505050565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e0657805160ff1916838001178555610e34565b82800160010185558215610e34579182015b82811115610e33578251825591602001919060010190610e18565b5b509050610e419190610e45565b5090565b610e6791905b80821115610e63576000816000905550600101610e4b565b5090565b9056fea265627a7a72315820b044a8fc3cb4aee908e05275fb3e9e10dd648237148b7880db1c30575afbf45064736f6c63430005110032"

Tipp = web3.eth.contract(abi=abi, bytecode=bytecode)

web3.eth.defaultAccount = web3.eth.accounts[0]
tx1_hash = Tipp.constructor().transact()
tx_receipt = web3.eth.waitForTransactionReceipt(tx1_hash)
contract = web3.eth.contract(address=tx_receipt.contractAddress, abi=abi)

def newtipp(add, cat, brief, time, location, station, tipscore):
    tx_hash = contract.functions.addTips(add, cat, brief, time, location, station, tipscore).transact()

    return web3.toHex(tx_hash)

def getTippInfo(add):
    return contract.functions.getTipsInfo(web3.toChecksumAddress(add)).call()